var haloSelectRange = (function (exports) {
  'use strict';

  /**
   * https://github.com/ovenslove/vue-mdEditor/blob/master/static/js/rangeFn.js
   */
  /**
   * 获取光标位置
   * @param {HTMLElement} textDom
   */
  function getCursortPosition(textDom) {
      var cursorPos = 0;
      var d = document;
      if (d.selection) {
          // IE Support
          textDom.focus();
          var selectRange = d.selection.createRange();
          selectRange.moveStart("character", -textDom.value.length);
          cursorPos = selectRange.text.length;
      }
      else if (textDom.selectionStart || textDom.selectionStart === 0) {
          // Firefox support
          cursorPos = textDom.selectionStart;
      }
      return cursorPos;
  }
  /**
   * 设置光标位置
   * @param {HTMLElement} textDom
   * @param {Number} pos
   */
  function setCursorPosition(textDom, pos) {
      if (textDom.setSelectionRange) {
          // IE Support
          textDom.focus();
          textDom.setSelectionRange(pos, pos);
      }
      else if (textDom.createTextRange) {
          // Firefox support
          if (!textDom.createTextRange)
              return;
          var range = textDom.createTextRange();
          range.collapse(true);
          range.moveEnd("character", pos);
          range.moveStart("character", pos);
          range.select();
      }
  }
  /**
   * 获取选中文字
   */
  function getSelectText() {
      var userSelection, text = "", d = document;
      if (window.getSelection) {
          // Firefox support
          userSelection = window.getSelection();
          text = userSelection ? userSelection.toString() : "";
      }
      else if (d.selection) {
          // IE Support
          userSelection = d.selection.createRange();
          text = userSelection.text;
      }
      return text;
  }
  /**
   * 选中特定范围的文本
   * @param {HTMLElement} textDom
   * @param {Number} startPos
   * @param {Number} endPos
   */
  function setSelectText(textDom, startPos, endPos) {
      startPos = Number(startPos);
      endPos = Number(endPos);
      var textLength = textDom.value.length;
      if (textLength) {
          if (!startPos) {
              startPos = 0;
          }
          if (!endPos) {
              endPos = textLength;
          }
          if (startPos > textLength) {
              startPos = textLength;
          }
          if (endPos > textLength) {
              endPos = textLength;
          }
          if (startPos < 0) {
              startPos = textLength + startPos;
          }
          if (endPos < 0) {
              endPos = textLength + endPos;
          }
          if (textDom.createTextRange) {
              // IE Support
              var range = textDom.createTextRange();
              range.moveStart("character", -textLength);
              range.moveEnd("character", -textLength);
              range.moveStart("character", startPos);
              range.moveEnd("character", endPos);
              range.select();
          }
          else {
              // Firefox support
              textDom.setSelectionRange(startPos, endPos);
              textDom.focus();
          }
      }
  }
  /**
   * 在光标后插入文本
   * @param {HTMLElement} textDom
   * @param {String} value
   */
  function insertAfterText(textDom, value) {
      var selectRange;
      var d = document;
      if (d.selection) {
          // IE Support
          textDom.focus();
          selectRange = d.selection.createRange();
          selectRange.text = value;
          textDom.focus();
      }
      else if (textDom.selectionStart || textDom.selectionStart === 0) {
          // Firefox support
          var startPos = textDom.selectionStart || 0;
          var endPos = textDom.selectionEnd || 0;
          var scrollTop = textDom.scrollTop;
          textDom.value =
              textDom.value.substring(0, startPos) +
                  value +
                  textDom.value.substring(endPos, textDom.value.length);
          textDom.focus();
          textDom.selectionStart = startPos + value.length;
          textDom.selectionEnd = startPos + value.length;
          textDom.scrollTop = scrollTop;
      }
      else {
          textDom.value += value;
          textDom.focus();
      }
  }

  exports.getCursortPosition = getCursortPosition;
  exports.getSelectText = getSelectText;
  exports.insertAfterText = insertAfterText;
  exports.setCursorPosition = setCursorPosition;
  exports.setSelectText = setSelectText;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
